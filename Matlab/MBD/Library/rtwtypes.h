/*
 * Filename:           rtwtypes.h
 *
 * Description: Defines Real-Time Workshop (RTW) data types.
 *              It is generated by RTW during auto-code generation,
 *              but this file in \CORE\AUTO_CODE\Library
 *              is a modifed version to avoid build conflicts.
 *              Manual modifications commented.
 *              Comparison needs to be done with rtwtypes.h generated
 *              for each sub-syst in case additional types needed by RTW
 *              need to be manually added to this version in build area.
 *
 *
 *
 * Real-Time Workshop code generated for Simulink model EPSE_EXHE.
 * Model version                        : 1.2573
 * Real-Time Workshop file version      : 7.6  (R2010b)  03-Aug-2010
 * Real-Time Workshop file generated on : Mon Mar 21 09:45:06 2011
 * TLC version                          : 7.6 (Jul 13 2010)
 * C/C++ source code generated on       : Mon Mar 21 09:45:07 2011
 *
 * Target selection: ert.tlc
 * Embedded hardware selection: Generic->32-bit Embedded Processor
 * Code generation objectives: Unspecified
 * Validation result: Not run
 *
 **************************************************************************************************
 *
 * Forward Engine Management Systems
 *
 * Copyright 1999-2011, Delphi Technologies, Inc.
 * All rights reserved.
 *
 **************************************************************************************************
 *
 * Current Module Info:
 *
 * %full_name:     kok_pt2#16/incl/rtwtypes.h/5.2.3 %
 * %date_created:  Tue Feb 11 14:01:15 2014 %
 * %version:       5.2.3 %
 * %derived_by:    zzmkdw %
 *
 **************************************************************************************************
 */

#include "reuse.h"
#include "haldef.h"


#ifndef RTW_HEADER_rtwtypes_h_
#define RTW_HEADER_rtwtypes_h_
#ifndef __RTWTYPES_H__
#define __RTWTYPES_H__
#ifndef TRUE
# define TRUE                          (1U)
#endif

#ifndef FALSE
# define FALSE                         (0U)
#endif

#ifndef __TMWTYPES__
#define __TMWTYPES__
#include <limits.h>
#if (  ( config_Compiler_Vendor == option_TASKING)\
    || ( config_Compiler_Vendor == option_TASKING_2_0)  )
#include "tricore_tasking_types.h"
#endif

/*=======================================================================*
 * Target hardware information
 *   Device type: Generic->32-bit Embedded Processor
 *   Number of bits:     char:   8    short:   16    int:  32
 *                       long:  32      native word size:  32
 *   Byte ordering: Unspecified
 *   Signed integer division rounds to: Undefined
 *   Shift right on a signed integer as arithmetic shift: on
 *=======================================================================*/

/*=======================================================================*
 * Fixed width word size data types:                                     *
 *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *
 *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *
 *   real32_T, real64_T           - 32 and 64 bit floating point numbers *
 *=======================================================================*/
#if(0) /* Commented out to avoid conflicts. */
typedef signed char int8_T;
typedef unsigned char uint8_T;
typedef short int16_T;
typedef unsigned short uint16_T;
typedef int int32_T;
typedef unsigned int uint32_T;
typedef float real32_T;
typedef double real64_T;
#endif

#ifndef uint8_T
typedef unsigned char uint8_T;
#endif
/*===========================================================================*
 * Generic type definitions: real_T, time_T, boolean_T, int_T, uint_T,       *
 *                           ulong_T, char_T and byte_T.                     *
 *===========================================================================*/
typedef double real_T;
typedef double time_T;
typedef float real32_T;

/* Previous state of a trigger signal */
typedef uint8_T ZCSigState;

/* States of an enabled subsystem */
typedef enum {
  SUBSYS_DISABLED = 0,
  SUBSYS_ENABLED = 2,
  SUBSYS_BECOMING_DISABLED = 4,
  SUBSYS_BECOMING_ENABLED = 8,
  SUBSYS_TRIGGERED = 16
  } CondStates;


#if(0) /* Commented out to avoid conflicts. */
typedef unsigned char boolean_T;
#endif

typedef int int_T;
typedef unsigned int uint_T;
typedef unsigned long ulong_T;
typedef char char_T;
//typedef unsigned char uchar_T; /* Commented out to avoid conflicts. */
typedef char_T byte_T;

typedef signed char int8_T;	/* 11May10 : Manual addition to define int8_T. */
typedef signed short int16_T;   /* 13Sep10 : Manual additon to define int16_T. */
typedef int int32_T; /* 5Oct10MM : Manual addition to fix compile issue after  */
                     /* going to Matlab 2010b which added casting of booleans  */
		             /* to int32_T.  Mathworks to fix boolean issue in 2011a.  */
#ifndef uint16_T
typedef unsigned short uint16_T;   /* 21Jan14 : Manual additon to define uint16_T. NOTE: This was done to make autocode work for FreeScale (MT62), but will conflict with TriCore due to prior declaration in haldef.h */
#endif
/*=======================================================================*
 * Min and Max:                                                          *
 *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *
 *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *
 *=======================================================================*/
#define MAX_int8_T                     ((int8_T)(127))
#define MIN_int8_T                     ((int8_T)(-128))
#define MAX_uint8_T                    ((uint8_T)(255U))
#define MIN_uint8_T                    ((uint8_T)(0U))
#define MAX_int16_T                    ((int16_T)(32767))
#define MIN_int16_T                    ((int16_T)(-32768))
#define MAX_uint16_T                   ((uint16_T)(65535U))
#define MIN_uint16_T                   ((uint16_T)(0U))
#define MAX_int32_T                    ((int32_T)(2147483647))
#define MIN_int32_T                    ((int32_T)(-2147483647-1))
#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))
#define MIN_uint32_T                   ((uint32_T)(0U))

/* Logical type definitions */
#if (!defined(__cplusplus)) && (!defined(__true_false_are_keywords))
#  ifndef false
#   define false                       (0U)
#  endif

#  ifndef true
#   define true                        (1U)
#  endif
#endif

/*
 * Real-Time Workshop assumes the code is compiled on a target using a 2's compliment representation
 * for signed integer values.
 */
#if ((SCHAR_MIN + 1) != -SCHAR_MAX)
#error "This code must be compiled using a 2's complement representation for signed integer values"
#endif

/* This ID is used to detect inclusion of an incompatible rtwtypes.h */
#define RTWTYPES_ID_C08S16I32L32N32F0

/* This ID is used to detect inclusion of an incompatible rtwtypes.h */
#define RTWTYPES_ID_C08S16I32L32N32F1
#else                                  /* __TMWTYPES__ */
#define TMWTYPES_PREVIOUSLY_INCLUDED
#endif                                 /* __TMWTYPES__ */

/* Block D-Work pointer type */
typedef void * pointer_T;

/* Define RTW replacement data types. */
#include "ctcm_types.h"                /* User defined replacement datatype for real32_T  */

/* Simulink specific types */
#ifndef __SIMSTRUC_TYPES_H__
#define __SIMSTRUC_TYPES_H__

/* Trigger directions: falling, either, and rising */
typedef enum {
  FALLING_ZERO_CROSSING = -1,
  ANY_ZERO_CROSSING = 0,
  RISING_ZERO_CROSSING = 1
} ZCDirection;

/* Previous state of a trigger signal */
//typedef uint8_T ZCSigState; /* Commented out to avoid conflicts. */

/* Initial value of a trigger zero crossing signal */
#define UNINITIALIZED_ZCSIG            0x03U
#define NEG_ZCSIG                      0x02U
#define POS_ZCSIG                      0x01U
#define ZERO_ZCSIG                     0x00U

/* Current state of a trigger signal */
typedef enum {
  FALLING_ZCEVENT = -1,
  NO_ZCEVENT = 0,
  RISING_ZCEVENT = 1
} ZCEventType;

#endif                                 /* __SIMSTRUC_TYPES_H__ */
#endif                                 /* __RTWTYPES_H__ */
#endif                                 /* RTW_HEADER_rtwtypes_h_ */

/*************************************************************************************************
*
* Revision History for AutoCode Data Dictionary Global settings :
*
* Rev.  YYMMDD Who RSM#  Changes
* ----  ------ --- ----- ------------------------------------------------------------------------
* 1.0   110321 mm  9300  Original implementation as part of introducing new auto-code process.
* 2     110614 me  -BM-  Fixed compatibility with Autocode for Super Knock RSM 9499.
* 3     110615 me  -BM-  Fixed compatibility with Autocode for Super Knock RSM 9499.
* 4     110626 me  -BM-  Added Tasking complier switch
* 5     110629 me  -BM-  Added uint8_T for Diab build
* 6     140129 mm  11268 Added uint16_T
* kok_pt2#5.1.1 
*       130425 as  10708 Added T_MOLWT_0_32,T_MOLES_0_16384, T_MOLES_LONG
*
*       140207 ses -BM- Merged 'rtwtypes.h~5.2.1' with 'rtwtypes.h~5.1.1'.
*
*
*************************************************************************************************/
